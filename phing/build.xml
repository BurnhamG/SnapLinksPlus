<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2016 Clint Priest
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
  ~ to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
  ~ and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  ~ WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  ~ CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  ~ DEALINGS IN THE SOFTWARE.
  -->

<project name="SnapLinks" default="build-again" basedir="../">

	<fileset dir="." id="AllFiles">
		<include name="src/" />
		<include name="res/" />
		<exclude name="**/*Test*"/>
		<exclude name="res/Screenshot*.*"/>
		<exclude name="**/*Playground*"/>
		<exclude name="src/JetBrains-Extensions.es6"/>
		<exclude name="src/lib/lodash*"/>
		<!--<exclude name="src/lib/transducers*"/>-->
		<exclude name="**/*-compiled*"/>
	</fileset>


	<!-- 	PREPARE 					-->


	<target name="prepare">
		<delete dir="${builddir}" />

		<echo msg="Creating build directory." />
		<mkdir dir="${builddir}"/>
	</target>

	<target name="init">
		<property file="phing/build.properties"/>
		<property name="dist-dir" value="./dist"/>
		<property name="lib-dir" value="./src/lib"/>

		<property name="moz-ext" value="xpi"/>
		<property name="chrome-ext" value="crx"/>

		<!--<property name="package" value="${phing.project.name}" override="true"/>-->
		<property name="builddir" value="./build" override="true"/>
		<!--<property name="srcdir" value="${project.basedir}" override="true"/>-->

	</target>


	<!-- 	BUILD 					-->


	<target name="build" depends="prepare">

		<property name="version" value="${version.major}.${version.minor}.${version.patch}.${version.build}"/>
		<property name="version_mozilla" value="${version.major}.${version.minor}.${version.patch}.${version.build}"/>
		<if>
			<equals arg1="${version.type}" arg2="beta"/>
			<then>
				<echo msg="Beta Build..."/>
				<property name="version_name" value="${version.major}.${version.minor}.${version.patch}b${version.build}"/>
				<property name="version_mozilla" value="${version.major}.${version.minor}.${version.patch}b${version.build}" override="true"/>
			</then>
			<else>
				<echo msg="Release Build..."/>
				<property name="version_name" value="${version}"/>
			</else>
		</if>

		<echo msg="Copying files to build directory..." />
		<copy file="phing/manifest-in.json" tofile="build/manifest.json">
			<filterchain>
				<expandproperties/>
				<replaceregexp>
					<regexp pattern=".*@Chrome.*[\r\n]{1,2}" replace="" modifiers="i"/>
					<regexp pattern="\s+//.+" replace="" modifiers="i"/>
				</replaceregexp>
			</filterchain>
		</copy>
		<copy todir="${builddir}">
			<fileset refid="AllFiles"/>
			<filterchain>
				<replaceregexp>
					<regexp pattern=".*#DevCode.*[\r\n]{1,2}" replace="" modifiers="i" />
				</replaceregexp>
			</filterchain>
		</copy>
		<copy file="build/manifest.json" tofile="manifest.json" />
	</target>

	<target name="build-increment">
		<php expression="${version.build}+1" returnProperty="version.build"/>
		<phingcall target="create-dist"/>
		<echoproperties regex="/^(version)\..+$/" destfile="phing/build.properties"/>
	</target>

	<target name="update-libraries" depends="init">
		<!--<echo msg="Building custom lodash script..."/>-->
		<!--<mkdir dir="${lib-dir}"/>-->
		<!--<exec command="lodash strict include=debounce,throttle -m -o lodash-snaplinks.js" dir="${lib-dir}" logoutput="true"/>-->
	</target>

	<!--	EXECUTION TARGETS -->

	<target name="build-again" depends="init">
		<phingcall target="create-dist"/>
	</target>

	<target name="build-release" depends="init">
		<property name="version.type" value="release" override="true"/>
		<phingcall target="build-increment"/>
	</target>

	<target name="build-beta" depends="init">
		<property name="version.type" value="beta" override="true"/>
		<phingcall target="build-increment"/>
	</target>

	<!--	ENCRYPT/DECRYPT FILES	-->

	<!-- http://stackoverflow.com/questions/7143514/how-to-encrypt-a-large-file-in-openssl-using-public-key -->
	<!--
		Encrypt Large File
			1. Generate Random Password For Symmetric Encryption
			2. Encrypt file with password file from #1
			3. Encrypt password file with public key
			4. Delete unencrypted password file

		Decrypt Large File
			1. Decrypt password file with private key (password protected)
			2. Decrypt file with decrypted password file
			3. Delete decrypted password file
	-->

	<target name="secure-init">
		<property name="pubkey" value="misc/keys/public.pem" />
		<property name="privkey" value="misc/keys/private.pem" />
	</target>

	<target name="encrypt-files" depends="secure-init">
		<phingcall target="encrypt-file">
			<property name="filename" value="secure.properties"/>
		</phingcall>
		<phingcall target="encrypt-file">
			<property name="filename" value="ChromeExtension.pem"/>
		</phingcall>
	</target>

	<target name="encrypt-file">
		<exec command="openssl rsautl -encrypt -inkey ${pubkey} -pubin -in misc/${filename} -out phing/${filename}.dat" passthru="true" checkreturn="true" />
	</target>

	<!--	PACKAGE				-->

	<target name="create-dist" depends="build">
		<property name="basename" value="SnapLinks-${version_name}" />

		<property name="filepath" value="${dist-dir}/${basename}.${moz-ext}"/>
		<echo msg="Creating Zip Archive: ${filepath}..."/>
		<zip destfile="${filepath}" basedir="${builddir}"/>
		<echo msg="Done."/>
	</target>

</project>
